/* Copyright (c) 2021 vesoft inc. All rights reserved.
 *
 * This source code is licensed under Apache 2.0 License,
 * attached with Common Clause Condition 1.0, found in the LICENSES directory.
 */

#ifndef CONTEXT_AST_QUERYASTCONTEXT_H_
#define CONTEXT_AST_QUERYASTCONTEXT_H_

#include "common/base/Base.h"
#include "common/expression/Expression.h"
#include "context/ast/AstContext.h"
#include "visitor/DeducePropsVisitor.h"

namespace nebula {
namespace graph {

// GO
enum FromType {
    kInstantExpr,
    kVariable,
    kPipe,
};

struct Starts {
    FromType                fromType{kInstantExpr};
    Expression*             src{nullptr};
    Expression*             originalSrc{nullptr};
    std::string             userDefinedVarName;
    std::string             firstBeginningSrcVidColName;
    std::vector<Value>      vids;
};

struct Over {
    bool                            isOverAll{false};
    std::vector<EdgeType>           edgeTypes;
    storage::cpp2::EdgeDirection    direction;
    std::vector<std::string>        allEdges;
};

// path context
struct PathContext {
    Starts from;
    Starts to;
    StepClause steps;
    Over over;

    bool isShortest_{false};
    bool isWeight_{false};
    bool noLoop_{false};

    // runtime
    PlanNode* loopDepTail{nullptr};
    PlanNode* toProjectStartVid{nullptr};
    PlanNode* fromDedupStartVid{nullptr};
    PlanNode* toDedupStartVid{nullptr};
};

struct GoAstContext final : AstContext {
    Starts                                                  from;
    StepClause                                              steps;
    std::string                                             srcVidColName;
    PlanNode*                                               projectStartVid{nullptr};
    Over                                                    over;
    Expression*                                             filter{nullptr};
    std::vector<std::string>                                colNames;
    YieldColumns*                                           yields{nullptr};
    bool                                                    distinct{false};

    // Generated by validator if needed, and the lifecycle of raw pinters would
    // be managed by object pool
    YieldColumns*                                           srcAndEdgePropCols{nullptr};
    YieldColumns*                                           dstPropCols{nullptr};
    YieldColumns*                                           inputPropCols{nullptr};
    std::unordered_map<std::string, YieldColumn*>           propExprColMap;
    Expression*                                             newFilter{nullptr};
    YieldColumns*                                           newYieldCols{nullptr};
    // Used for n steps to trace the path
    std::string                                             dstVidColName;
    // Used for get dst props
    std::string                                             joinDstVidColName;

    ExpressionProps                                         exprProps;
    std::string                                             inputVarName;
};
}  // namespace graph
}  // namespace nebula
#endif  // CONTEXT_AST_QUERYASTCONTEXT_H_
